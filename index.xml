<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Aditya's Blog</title><link>https://saligrama.io/blog/</link><description>Recent content on Aditya's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 28 Feb 2023 20:20:00 -0800</lastBuildDate><atom:link href="https://saligrama.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>A student's dream: hacking (then fixing) Gradescope's autograder</title><link>https://saligrama.io/blog/post/gradescope-autograder-security/</link><pubDate>Tue, 28 Feb 2023 20:20:00 -0800</pubDate><guid>https://saligrama.io/blog/post/gradescope-autograder-security/</guid><description>&lt;p>Ever since I started exploring security more deeply, I&amp;rsquo;ve been asked countless times by people if I could hack into grading systems to change my (or, more often, their) grades. With &lt;a href="https://gradescope.com" target="_blank">Gradescope&lt;/a> being the most ubiquitous platform for grading STEM classes at Stanford, my standard response was always that I couldn&amp;rsquo;t, imagining that a well-established EdTech company would secure their platform well enough.&lt;/p>
&lt;p>As it turns out, Gradescope&amp;rsquo;s autograders have been vulnerable to various types of attack since 2016. Gradescope has known about the issues since at least 2020, yet has indicated it cannot distribute a general fix.&lt;/p>
&lt;p>This post covers my exploration of Gradescope&amp;rsquo;s autograder vulnerabilities, an analysis of the potential impact on courses, and how I created &lt;a href="https://github.com/saligrama/securescope" target="_blank">Securescope&lt;/a>, my attempt at a more secure autograder configuration.&lt;/p></description></item><item><title>Dodging OAuth origin restrictions for Firebase spelunking</title><link>https://saligrama.io/blog/post/dodging-oauth-origin-restrictions/</link><pubDate>Wed, 23 Nov 2022 02:30:00 -0500</pubDate><guid>https://saligrama.io/blog/post/dodging-oauth-origin-restrictions/</guid><description>&lt;p>In my &lt;a href="https://saligrama.io/blog/blog/post/firebase-insecure-by-default">last post&lt;/a>, I covered the marvelous world of Firebase database spelunking: when app developers misconfigure their Firestore security rules, the resulting ability to perform unauthorized data accesses can lead to terrifying data breaches for those apps. Thanks to tools like &lt;a href="https://github.com/iosiro/baserunner" target="_blank">Baserunner&lt;/a>, testing apps for such misconfigurations is easier than ever.&lt;/p>
&lt;p>By saving authorization state when logging into Firebase databases using email/password or phone/OTP sign-in methods, Baserunner lets you focus on actually querying the database for data. However, what happens when client apps only allow sign-in using a Google account?&lt;/p>
&lt;p>This blog post covers how &lt;a href="https://github.com/glen3b" target="_blank">Glen Husman&lt;/a> and I conducted security testing of such a Firebase client app, using a clever solution to grab the Google OAuth token to sign into the database with. I then used lessons learned from that engagement to &lt;a href="https://github.com/iosiro/baserunner/pull/12" target="_blank">contribute&lt;/a> Google sign-in functionality back to Baserunner.&lt;/p></description></item><item><title>Firebase: Insecure by Default (feat. that one time our classmates tried to sue us)</title><link>https://saligrama.io/blog/post/firebase-insecure-by-default/</link><pubDate>Mon, 14 Nov 2022 12:55:00 -0800</pubDate><guid>https://saligrama.io/blog/post/firebase-insecure-by-default/</guid><description>&lt;p>By shifting the data authorization and access restriction burden from robust programmatic systems running on a server to static security rules, backend-as-a-service platforms like &lt;a href="https://firebase.google.com" target="_blank">Google Firebase&lt;/a> put new app developers and their products at risk of catastrophic data breaches if utmost care is not paid to the efficacy of these rules.&lt;/p>
&lt;p>This blog post details how to find such vulnerabilities in apps using Firebase as a backend. I also tell the story of one such vulnerability I found (along with &lt;a href="https://miles.land" target="_blank">Miles McCain&lt;/a> and &lt;a href="https://github.com/cdenicola" target="_blank">Cooper de Nicola&lt;/a>) in &lt;a href="https://fizzsocial.app" target="_blank">Fizz&lt;/a>, a popular anonymous posting platform at Stanford and other universities. Fizz&amp;rsquo;s improper handling of Firebase security rules allowed full deanonymization of all posts down to email and/or phone number and unauthorized granting of moderator permissions.&lt;/p>
&lt;p>Lastly, I talk about legal threats we received in the course of disclosing these vulnerabilities.&lt;/p></description></item><item><title>Flipping the script: when a hacking class gets hacked</title><link>https://saligrama.io/blog/post/hack-lab-got-hacked/</link><pubDate>Wed, 12 Oct 2022 20:11:00 -0700</pubDate><guid>https://saligrama.io/blog/post/hack-lab-got-hacked/</guid><description>&lt;p>This morning, an &lt;a href="https://en.wikipedia.org/wiki/EternalBlue" target="_blank">EternalBlue&lt;/a>-vulnerable machine used for testing for Stanford&amp;rsquo;s &lt;a href="https://archive.ph/PfEXU" target="_blank">Hack Lab&lt;/a> course accidentally given a public IP address on Google Cloud was unsurprisingly pwned and used to launch further EternalBlue scanning against other public web hosts.&lt;/p>
&lt;p>This blog post describes our course&amp;rsquo;s infrastructure setup (including why we had that testing box in the first place), how we discovered and remediated the incident, and how we used the incident as a way to teach students about incident response and public disclosure.&lt;/p></description></item><item><title>Upgrading my personal security, part two: disk encryption and secure boot</title><link>https://saligrama.io/blog/post/upgrading-personal-security-evil-maid/</link><pubDate>Wed, 04 May 2022 01:42:46 -0700</pubDate><guid>https://saligrama.io/blog/post/upgrading-personal-security-evil-maid/</guid><description>&lt;p>This is a continuation of my &lt;a href="https://saligrama.io/blog/blog/post/upgrading-personal-security-web">previous post&lt;/a> about upgrading personal security. This post focuses on preventing &lt;a href="https://en.wikipedia.org/wiki/Evil_maid_attack" target="_blank">evil maid attacks&lt;/a> using disk encryption and secure boot.&lt;/p>
&lt;p>With this post, I compiled and summarized all of the resources I used to do all of this configuration. The hope is that having a set of steps in one place reduces the need to go hunting across different Reddit posts, blog posts, and wiki articles as I did.&lt;/p></description></item><item><title>Upgrading my personal security, part one: password generation, 2FA, YubiKey</title><link>https://saligrama.io/blog/post/upgrading-personal-security-web/</link><pubDate>Wed, 04 May 2022 01:42:44 -0700</pubDate><guid>https://saligrama.io/blog/post/upgrading-personal-security-web/</guid><description>&lt;p>I&amp;rsquo;m someone who&amp;rsquo;s been reasonably technical for a long time, but was not really interested in security until about a year and a half ago. This means I had a lot of configuration set up for convenience, but without much in the way of security.&lt;/p>
&lt;p>In the last few weeks, I started to change that and significantly upgraded my personal security. This post covers the first steps I took towards that end, starting with password generation and better two-factor authentication.&lt;/p></description></item><item><title>Hello, world!</title><link>https://saligrama.io/blog/post/hello/</link><pubDate>Mon, 02 May 2022 00:06:06 -0700</pubDate><guid>https://saligrama.io/blog/post/hello/</guid><description>&lt;h1 id="hello-world">Hello, world!&lt;/h1>
&lt;p>Test post for this blog.&lt;/p></description></item></channel></rss>